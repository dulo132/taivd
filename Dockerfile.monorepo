# Multi-stage Dockerfile for TaiVideoNhanh Monorepo
# Optimized for EasyPanel deployment with both frontend and backend

FROM node:18-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    libc6-compat \
    python3 \
    make \
    g++ \
    curl \
    bash

# Set working directory
WORKDIR /app

# ================================
# Dependencies Stage
# ================================
FROM base AS deps

# Copy package files
COPY package.json package-lock.json* ./
COPY frontend/package.json ./frontend/
COPY backend/package.json ./backend/

# Install dependencies for both frontend and backend
RUN npm ci

# Install backend dependencies
WORKDIR /app/backend
RUN npm ci

# Install frontend dependencies
WORKDIR /app/frontend
RUN npm ci

# ================================
# Backend Builder Stage
# ================================
FROM base AS backend-builder
WORKDIR /app

# Copy backend dependencies
COPY --from=deps /app/backend/node_modules ./backend/node_modules
COPY backend/ ./backend/

# Build backend
WORKDIR /app/backend
RUN npm run build

# ================================
# Frontend Builder Stage
# ================================
FROM base AS frontend-builder
WORKDIR /app

# Copy frontend dependencies
COPY --from=deps /app/frontend/node_modules ./frontend/node_modules
COPY frontend/ ./frontend/

# Build frontend with admin routes
WORKDIR /app/frontend
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production

# Build Next.js application
RUN npm run build

# ================================
# Production Stage
# ================================
FROM base AS runner
WORKDIR /app

# Set production environment
ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# Create user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Create application directories with proper permissions
RUN mkdir -p /app/data/cookies /app/data/cookies/backup /app/data/uploads /app/logs
RUN chown -R nextjs:nodejs /app/data /app/logs
RUN chmod -R 755 /app/data /app/logs

# Copy built backend
COPY --from=backend-builder --chown=nextjs:nodejs /app/backend/build ./backend/build
COPY --from=backend-builder --chown=nextjs:nodejs /app/backend/node_modules ./backend/node_modules
COPY --from=backend-builder --chown=nextjs:nodejs /app/backend/package.json ./backend/

# Copy built frontend
COPY --from=frontend-builder --chown=nextjs:nodejs /app/frontend/.next/standalone ./frontend/
COPY --from=frontend-builder --chown=nextjs:nodejs /app/frontend/.next/static ./frontend/.next/static
COPY --from=frontend-builder --chown=nextjs:nodejs /app/frontend/public ./frontend/public

# Copy startup script
COPY --chown=nextjs:nodejs start-monorepo.sh ./
RUN chmod +x start-monorepo.sh

# Copy health check script
COPY --chown=nextjs:nodejs health-check-monorepo.sh ./
RUN chmod +x health-check-monorepo.sh

# Switch to non-root user
USER nextjs

# Expose frontend port (backend runs internally on 5000)
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ./health-check-monorepo.sh

# Start both frontend and backend
CMD ["./start-monorepo.sh"]
