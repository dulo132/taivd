#!/bin/bash

# TaiVideoNhanh Production Deployment Script
set -e

echo "🚀 Starting TaiVideoNhanh deployment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    print_error "Docker is not installed. Please install Docker first."
    exit 1
fi

# Check if Docker Compose is installed
if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose is not installed. Please install Docker Compose first."
    exit 1
fi

# Check if .env.production exists
if [ ! -f ".env.production" ]; then
    print_error ".env.production file not found. Please create it from .env.production.example"
    exit 1
fi

# Load environment variables
export $(cat .env.production | grep -v '^#' | xargs)

print_status "Environment loaded from .env.production"

# Create necessary directories
print_status "Creating necessary directories..."
mkdir -p ./backups
mkdir -p ./letsencrypt
mkdir -p ./monitoring/prometheus
mkdir -p ./monitoring/grafana/provisioning

# Set proper permissions
chmod 600 .env.production
chmod +x deploy.sh

# Pull latest images
print_status "Pulling latest Docker images..."
docker-compose -f docker-compose.prod.yml pull

# Build application images
print_status "Building application images..."
docker-compose -f docker-compose.prod.yml build --no-cache

# Stop existing containers
print_status "Stopping existing containers..."
docker-compose -f docker-compose.prod.yml down

# Start services
print_status "Starting services..."
docker-compose -f docker-compose.prod.yml up -d

# Wait for services to be ready
print_status "Waiting for services to be ready..."
sleep 30

# Check service health
print_status "Checking service health..."

# Check database
if docker-compose -f docker-compose.prod.yml exec -T db pg_isready -U $DB_USER -d $DB_NAME; then
    print_status "✅ Database is ready"
else
    print_error "❌ Database is not ready"
    exit 1
fi

# Check Redis
if docker-compose -f docker-compose.prod.yml exec -T redis redis-cli ping | grep -q PONG; then
    print_status "✅ Redis is ready"
else
    print_error "❌ Redis is not ready"
    exit 1
fi

# Check backend health
if curl -f http://localhost:5000/api/health > /dev/null 2>&1; then
    print_status "✅ Backend is ready"
else
    print_warning "⚠️  Backend health check failed, but continuing..."
fi

# Check frontend
if curl -f http://localhost:3000 > /dev/null 2>&1; then
    print_status "✅ Frontend is ready"
else
    print_warning "⚠️  Frontend health check failed, but continuing..."
fi

# Run database migrations (if any)
print_status "Running database migrations..."
docker-compose -f docker-compose.prod.yml exec -T backend npm run migrate || true

# Show running containers
print_status "Running containers:"
docker-compose -f docker-compose.prod.yml ps

# Show logs for troubleshooting
print_status "Recent logs:"
docker-compose -f docker-compose.prod.yml logs --tail=20

print_status "🎉 Deployment completed successfully!"
print_status "🌐 Frontend: https://$DOMAIN"
print_status "🔧 API: https://$DOMAIN/api"
print_status "📊 Grafana: http://localhost:3001"
print_status "📈 Prometheus: http://localhost:9090"

print_warning "⚠️  Please ensure your DNS is pointing to this server"
print_warning "⚠️  SSL certificates will be automatically generated by Let's Encrypt"

echo ""
echo "📋 Next steps:"
echo "1. Update your DNS records to point to this server"
echo "2. Configure your Stripe webhook endpoints"
echo "3. Set up monitoring alerts"
echo "4. Configure backup schedules"
echo "5. Test all functionality"

echo ""
echo "🔍 To view logs: docker-compose -f docker-compose.prod.yml logs -f [service_name]"
echo "🛑 To stop: docker-compose -f docker-compose.prod.yml down"
echo "🔄 To restart: docker-compose -f docker-compose.prod.yml restart [service_name]"
